package com.foxmo.crm.workbench.mapper;

import com.foxmo.crm.workbench.domain.Activity;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun May 22 10:45:31 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun May 22 10:45:31 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun May 22 10:45:31 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun May 22 10:45:31 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun May 22 10:45:31 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 创建市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的信息
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询指定市场活动的总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据ids数组删除市场活动信息
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询指定的市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据id修改指定市场活动的信息
     * @param activity
     * @return
     */
    int SaveEditActivityById(Activity activity);

    /**
     * 查询所有市场活动信息
     * @return
     */
    List<Activity> selectAllActivity();

    /**
     * 根据ids数组查询指定的市场活动信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 根据activityList集合新增市场活动
     * @param activityList
     * @return
     */
    int insertActivitysByList(List<Activity> activityList);

    /**
     * 根据id查询指定市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询所有与线索相关联的市场活动信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据Name模糊查询市场活动详细信息，并排除已经和ClueID关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(HashMap<String,Object> map);

    /**
     * 根据clueId查询与之关联的所有市场活动的详细信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByRelationClueId(String[] activityId);

    /**
     * 根据Name和ClueId模糊查询指定线索已关联的市场活动信息
     * @param map
     * @return
     */
    List<Activity> seleAvtivityForConvertByNameClueId(Map<String,Object> map);

}